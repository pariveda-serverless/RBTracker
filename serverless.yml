service: ractivitytracker

provider:
  name: aws
  runtime: nodejs6.10
  stage: prod
  environment:
    ACTIVITIES_TABLE: { Ref: ActivitiesTable }
    STAGE: ${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:dynamodb:'
            - Ref: AWS::Region
            - ':'
            - Ref: AWS::AccountId
            - ':table/'
            - Ref: ActivitiesTable
            - '*'

functions:

  postMessage:
    handler: functions/postMessage.handler
    events:
      - http:
          path: activities
          method: post
          cors: true

  dynoToCsv:
    handler: functions/dynoToCsv.handler
    events:
      - http:
<<<<<<< HEAD
          path: functions
          method: post
=======
          path: activities
          method: get
>>>>>>> serverless-cleanup
          cors: true

resources:

  Resources:
    BucketResource:
      Type: "AWS::S3::Bucket"

    ActivitiesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: RBActivities
        AttributeDefinitions:
          - AttributeName: activityId
            AttributeType: S
          - AttributeName: activityDate
            AttributeType: S
        KeySchema:
          - AttributeName: activityId
            KeyType: HASH
          - AttributeName: activityDate
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

  Outputs:

    ActivitiesTable:
      Description: Relationship Activity Tracker
      Value: { Ref: ActivitiesTable }
      Export:
        Name: ${opt:stage, self:provider.stage}-ActivitiesTable
